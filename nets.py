import gsipn as pn

def createChannel(id,net,params):
	net.add_place('w'+str(id),1)
	net.add_place('d'+str(id),0)
	net.add_place('r'+str(id),0)
	net.add_place('u'+str(id),0)
	net.add_place('ur'+str(id),0)
	net.add_transition('t0_'+str(id),t_class='exp',rate=params['lambda_dd'],assertion='c'+str(id)+' = not c'+str(id))
	net.add_transition('t1_'+str(id),predicate='r>0',assertion='r-=1')
	net.add_transition('t2_'+str(id),t_class='exp',rate=params['mu_dd'],assertion='r+=1\nc'+str(id)+' = not c'+str(id))
	net.add_transition('t3_'+str(id),t_class='exp',rate=params['lambda_du'],assertion='c'+str(id)+' = not c'+str(id))
	net.add_transition('t4_'+str(id),predicate='r>0',assertion='r-=1')
	net.add_transition('t5_'+str(id),t_class='exp',rate=params['mu_du'],assertion='r+=1\nc'+str(id)+' = not c'+str(id))
	net.add_transition('t6_'+str(id),predicate='ccf',assertion='c'+str(id)+' = not c'+str(id))
	net.add_inArc('w'+str(id),'t0_'+str(id))
	net.add_outArc('d'+str(id),'t0_'+str(id))
	net.add_inArc('d'+str(id),'t1_'+str(id))
	net.add_outArc('r'+str(id),'t1_'+str(id))
	net.add_inArc('r'+str(id),'t2_'+str(id))
	net.add_outArc('w'+str(id),'t2_'+str(id))
	net.add_inArc('w'+str(id),'t3_'+str(id))
	net.add_outArc('u'+str(id),'t3_'+str(id))
	net.add_inArc('u'+str(id),'t4_'+str(id))
	net.add_outArc('ur'+str(id),'t4_'+str(id))
	net.add_inArc('ur'+str(id),'t5_'+str(id))
	net.add_outArc('w'+str(id),'t5_'+str(id))
	net.add_inArc('w'+str(id),'t6_'+str(id))
	net.add_outArc('d'+str(id),'t6_'+str(id))
	net.add_varible('c'+str(id),True)
	return net


def create1oo1(params):
	net = pn.GSIPN()
	net.add_place('w',1)
	net.add_place('d',0)
	net.add_place('r',0)
	net.add_place('u',0)
	net.add_place('ru',0)
	net.add_place('A',1)
	net.add_place('U',0)
	net.add_transition('t0',t_class='exp',rate=params['lambda_dd'],assertion='c = not c')
	net.add_transition('t1',predicate='r>0',assertion='r-=1')
	net.add_transition('t2',t_class='exp',rate=params['mu_dd'],assertion='r+=1\nc = not c')
	net.add_transition('t3',t_class='exp',rate=params['lambda_de'], predicate = 'not c')
	net.add_transition('t4',t_class='exp',rate=params['mu_de'],predicate = 'c')
	net.add_inArc('w','t0')
	net.add_outArc('d','t0')
	net.add_inArc('d','t1')
	net.add_outArc('r','t1')
	net.add_inArc('r','t2')
	net.add_outArc('w','t2')
	net.add_inArc('A','t3')
	net.add_outArc('U','t3')
	net.add_inArc('U','t4')
	net.add_outArc('A','t4')
	net.add_varible('c',True)
	net.add_varible('r',1)
	return net

def create1oo2(params):
	net = pn.GSIPN()
	net = createChannel(1,net,params)
	net = createChannel(2,net,params)
	net.add_place('A',1)
	net.add_place('U',0)
	net.add_transition('t1',t_class='exp',rate=params['lambda_de'], predicate = 'not (c1 or c2)')
	net.add_transition('t2',t_class='exp',rate=params['mu_de'],predicate = 'c1 or c2')
	net.add_inArc('A','t1')
	net.add_outArc('U','t1')
	net.add_inArc('U','t2')
	net.add_outArc('A','t2')
	net.add_varible('r',2)
	net.add_varible('ccf',False)
	return net

def create2oo3(params):
	net = pn.GSIPN()
	net = createChannel(1,net,params)
	net = createChannel(2,net,params)
	net = createChannel(3,net,params)
	net.add_place('A',1)
	net.add_place('U',0)
	net.add_transition('t1',t_class='exp',rate=params['lambda_de'], predicate = 'not ((c1 and c2) or (c1 and c3) or (c2 and c3))')
	net.add_transition('t2',t_class='exp',rate=params['mu_de'],predicate = '(c1 and c2) or (c1 and c3) or (c2 and c3)')
	net.add_inArc('A','t1')
	net.add_outArc('U','t1')
	net.add_inArc('U','t2')
	net.add_outArc('A','t2')
	net.add_varible('r',3)
	net.add_varible('ccf',False)
	return net